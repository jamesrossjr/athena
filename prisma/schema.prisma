// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sessions       Session[]
  passwordResets PasswordReset[]
  socialAccounts SocialAccount[]
  pages          Page[]
  workspaces     Workspace[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userAgent String?
  ipAddress String?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_resets")
}

model SocialAccount {
  id         String @id @default(cuid())
  userId     String
  provider   String // "google", "facebook", etc.
  providerId String // ID from the social provider
  email      String?
  createdAt  DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerId])
  @@map("social_accounts")
}

// Unified Data Layer - Every piece of content is a record
model Page {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  title       String
  type        String   // "DOCUMENT", "DATABASE", "WHITEBOARD", "IDE", "CALENDAR", "KANBAN"
  icon        String?  // Icon for the page
  properties  Json?    // Page-specific properties (schema for DB, canvas settings for whiteboard, etc)
  metadata    Json?    // Additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  blocks       Block[]
  sourceLinks  Link[]       @relation("SourcePage")
  targetLinks  Link[]       @relation("TargetPage")
  
  @@index([userId, type])
  @@index([workspaceId])
  @@index([type])
  @@map("pages")
}

// Individual content blocks - the atomic units of the knowledge graph
model Block {
  id        String   @id @default(cuid())
  pageId    String
  parentId  String?  // For nested blocks (indentation, lists, etc)
  type      String   // "TEXT", "HEADING", "LIST", "TODO", "CODE", "IMAGE", "EMBED", "TABLE_ROW", etc
  content   Json     // Block-specific content structure
  position  Int      // Position within parent/page
  metadata  Json?    // Block-specific metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations  
  page         Page    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  parent       Block?  @relation("BlockHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     Block[] @relation("BlockHierarchy")
  sourceLinks  Link[]  @relation("SourceBlock")
  targetLinks  Link[]  @relation("TargetBlock")
  
  @@index([pageId])
  @@index([parentId])
  @@index([type])
  @@index([pageId, position])
  @@map("blocks")
}

// Universal linking system - connects any content to any other content
model Link {
  id              String   @id @default(cuid())
  sourceType      String   // "PAGE" or "BLOCK"
  sourcePageId    String?  // If linking from a page
  sourceBlockId   String?  // If linking from a block
  targetType      String   // "PAGE" or "BLOCK"
  targetPageId    String?  // If linking to a page
  targetBlockId   String?  // If linking to a block
  linkType        String   @default("REFERENCE") // "REFERENCE", "EMBED", "MENTION", "ALIAS"
  metadata        Json?    // Link-specific data (anchor text, context, etc)
  createdAt       DateTime @default(now())
  
  // Relations
  sourcePage   Page?  @relation("SourcePage", fields: [sourcePageId], references: [id], onDelete: Cascade)
  targetPage   Page?  @relation("TargetPage", fields: [targetPageId], references: [id], onDelete: Cascade)  
  sourceBlock  Block? @relation("SourceBlock", fields: [sourceBlockId], references: [id], onDelete: Cascade)
  targetBlock  Block? @relation("TargetBlock", fields: [targetBlockId], references: [id], onDelete: Cascade)
  
  @@index([sourcePageId])
  @@index([sourceBlockId])
  @@index([targetPageId])
  @@index([targetBlockId])
  @@index([linkType])
  @@map("links")
}

model Workspace {
  id        String   @id @default(cuid())
  userId    String
  name      String
  icon      String?
  color     String?
  settings  Json?    // Workspace settings (theme, layout preferences, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages     Page[]
  templates Template[]
  
  @@index([userId])
  @@map("workspaces")
}

model Template {
  id          String    @id @default(cuid())
  workspaceId String
  name        String
  content     Json      // TipTap document structure
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
  @@map("templates")
}
