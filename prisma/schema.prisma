// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sessions       Session[]
  passwordResets PasswordReset[]
  socialAccounts SocialAccount[]
  documents      Document[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userAgent String?
  ipAddress String?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_resets")
}

model SocialAccount {
  id         String @id @default(cuid())
  userId     String
  provider   String // "google", "facebook", etc.
  providerId String // ID from the social provider
  email      String?
  createdAt  DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerId])
  @@map("social_accounts")
}

model Document {
  id          String   @id @default(cuid())
  userId      String
  title       String
  type        String   // "text", "pdf", "image", etc.
  content     String?  // For text-based documents
  filePath    String?  // Secure reference to file location
  fileData    Bytes?   // Optional: store file data directly
  fileName    String?  // Original file name
  fileSize    Int?     // File size in bytes
  mimeType    String?  // MIME type for the file
  metadata    Json?    // Additional metadata (pages, dimensions, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, type])
  @@map("documents")
}
